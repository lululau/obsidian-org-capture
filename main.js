/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

"use strict";
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => OrgCapture
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var import_child_process = require("child_process");
var DEFAULT_SETTINGS = {
  emacsclientPath: "emacsclient"
};
var OrgCapture = class extends import_obsidian.Plugin {
  constructor() {
    super(...arguments);
    this.settings = DEFAULT_SETTINGS;
  }
  async onload() {
    await this.loadSettings();
    this.addCommand({
      id: "org-capture-current-note",
      name: "Capture current note to Emacs Org-mode",
      callback: () => {
        this.captureCurrentNote();
      }
    });
    this.addSettingTab(new OrgCaptureSettingTab(this.app, this));
  }
  onunload() {
  }
  async loadSettings() {
    this.settings = Object.assign({}, DEFAULT_SETTINGS, await this.loadData());
  }
  async saveSettings() {
    await this.saveData(this.settings);
  }
  captureCurrentNote() {
    const activeFile = this.app.workspace.getActiveFile();
    if (!activeFile) {
      new import_obsidian.Notice("No active file");
      return;
    }
    const title = activeFile.basename;
    const vaultName = this.app.vault.getName();
    const obsidianUrl = `obsidian://open?vault=${encodeURIComponent(vaultName)}&file=${encodeURIComponent(activeFile.path)}`;
    const orgLink = `[[${obsidianUrl}][${title}]]`;
    const command = `${this.settings.emacsclientPath} -e '(add-to-list '"'"'org-stored-links (list "${obsidianUrl}" "${title}"))'`;
    (0, import_child_process.exec)(command, (error, stdout, stderr) => {
      if (error) {
        console.error(`exec error: ${error}`);
        new import_obsidian.Notice(`Error running emacsclient: ${error.message}`);
        return;
      }
      if (stderr) {
        console.error(`stderr: ${stderr}`);
      }
      console.log(`stdout: ${stdout}`);
      new import_obsidian.Notice(`Captured link for: ${title}`);
    });
  }
};
var OrgCaptureSettingTab = class extends import_obsidian.PluginSettingTab {
  constructor(app, plugin) {
    super(app, plugin);
    this.plugin = plugin;
  }
  display() {
    const { containerEl } = this;
    containerEl.empty();
    containerEl.createEl("h2", { text: "Org Capture Settings" });
    new import_obsidian.Setting(containerEl).setName("Emacsclient Path").setDesc("The path to your emacsclient executable.").addText((text) => text.setPlaceholder("Enter path").setValue(this.plugin.settings.emacsclientPath).onChange(async (value) => {
      this.plugin.settings.emacsclientPath = value;
      await this.plugin.saveSettings();
    }));
  }
};
